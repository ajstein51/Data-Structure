/*
* AJ Stein
* Ohio University CS3610 Project 1
* 1-16-20
* We are to write a program that takes some numbers from the command line, and then print them, add to them, delete them, or reverse the order
*/

using namespace std;
#include <iostream>
#include <cstdlib>

// Writing the definitions for push front, pop front, reverse, print, and ~LinkedList, These are what they do:

// Big Three
//*********************************************
template<class T>
LinkedList<T>::~LinkedList(){
    // Deconstructor
    ListNode *rmptr;
    while(head != NULL){
	    rmptr = head;
	    head = head -> next;
        delete rmptr;
    }
}
//*********************************************
template<class T>
void LinkedList<T>::push_front(T data){ 
    /*
    // Enters a value in the front.
        head = new ListNode(data); // makes node
        head -> data = data; // sets data
        head -> next = NULL;
        ///////////////////////////
    */
   	if(head == NULL){
		head = new ListNode(data);
		head -> data = data;
	}
	else{
		ListNode *cursor = head;
		while(cursor -> next != NULL){
			cursor = cursor -> next;
		}
		cursor -> next = new ListNode(data);
		cursor -> next -> data = data;
	}
    ListNode *cursor = head;
    ListNode *previous = NULL, *n = NULL;
    while(cursor != NULL){
        n = cursor -> next;
        cursor -> next = previous;
        previous = cursor;
        cursor = n;
    }
    head = previous;
    

    
}
//*********************************************
template<class T>
void LinkedList<T>::pop_front(){  
    // Checks for an empty list, if not deletes first value
    if(head == NULL){
        cout << "\nThere is nothing in the list!" << endl;
    }
    else{
        ListNode *rmptr = head;
	    head = head -> next;
        delete rmptr;
    }
}
//*********************************************
template<class T>
void LinkedList<T>::print() const{
    // Checks for an empty list:
    if(head == NULL)
        cout << "\nThere is nothing in the list!" << endl;

    // Goes through list and prints it out, doesn't like just using "head" so ive replaced it with cursor. 
    ListNode *cursor = head;
	while(cursor != NULL){
		cout << cursor -> data;
        cout << " ";
		cursor = cursor -> next;
    }
}
//*********************************************
template<class T>
void LinkedList<T>::reverse(){
    if(head == NULL)
        cout << "\nThere is nothing in the list!" << endl;
    ListNode *cursor = head;
    ListNode *previous = NULL, *n = NULL;
    while(cursor != NULL){
        n = cursor -> next;
        cursor -> next = previous;
        previous = cursor;
        cursor = n;
    }
    head = previous;
}
//*********************************************
